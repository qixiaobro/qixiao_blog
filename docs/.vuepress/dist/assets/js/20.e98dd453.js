(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{483:function(t,s,a){"use strict";a.r(s);var n=a(21),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"异步编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步编程"}},[t._v("#")]),t._v(" 异步编程")]),t._v(" "),a("h3",{attrs:{id:"并发（concurrency）、并行（parallelism）的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发（concurrency）、并行（parallelism）的区别"}},[t._v("#")]),t._v(" 并发（concurrency）、并行（parallelism）的区别")]),t._v(" "),a("ul",[a("li",[t._v("并发是宏观上的，有A、B两个任务，在一段时间内通过任务间的切换完成了这两个任务。")]),t._v(" "),a("li",[t._v("并行是微观上的，cpu有A、B两个核心，同一时间A核心处理A任务，B核心处理B任务。")])]),t._v(" "),a("h3",{attrs:{id:"回调函数（callback）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调函数（callback）"}},[t._v("#")]),t._v(" 回调函数（callback）")]),t._v(" "),a("p",[t._v("回调函数有一个致命的弱点，那就是容易出现回调地狱（callback hell)。")]),t._v(" "),a("p",[t._v("根本原因：")]),t._v(" "),a("ol",[a("li",[t._v("嵌套函数存在耦合性，一旦有所改动，容易导致所有的都需要改动，牵一发而动全身。")]),t._v(" "),a("li",[t._v("嵌套函数一多，很难处理错误。")])]),t._v(" "),a("p",[t._v("缺点：1. 不能使用"),a("code",[t._v("try catch")]),t._v("捕获错误，不能直接"),a("code",[t._v("return")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator"}},[t._v("#")]),t._v(" Generator")]),t._v(" "),a("p",[t._v("​\tGenerator函数跟其它函数不同，它会停在yield的地方。每次传的参数会被当作上一次yield的结果。")]),t._v(" "),a("h3",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),a("p",[t._v("有三种状态：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("\t\t1. pending\n\t\t2. resolved\n  \t\t\t3. rejected\n")])])]),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'success'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无效")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reject'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("code",[t._v("promise")]),t._v("实现了链式调用，即每次"),a("code",[t._v("then")]),t._v("返回后的都是一个"),a("code",[t._v("promise")]),t._v("，并且是一个全新的"),a("code",[t._v("promise")]),t._v("，如果在"),a("code",[t._v("then")]),t._v("中使用了"),a("code",[t._v("return")]),t._v("，则"),a("code",[t._v("return")]),t._v("的值会被"),a("code",[t._v("resolve")]),t._v(".")]),t._v(" "),a("p",[t._v("缺点：无法取消"),a("code",[t._v("promise")])]),t._v(" "),a("h3",{attrs:{id:"async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[t._v("#")]),t._v(" async & await")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("一个函数如果加上"),a("code",[t._v("async")]),t._v(",那么该函数就会返回一个"),a("code",[t._v("promise")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("await")]),t._v("只能跟"),a("code",[t._v("async")]),t._v("一起用")])]),t._v(" "),a("li",[a("p",[t._v("相比于"),a("code",[t._v("promise")]),t._v("来说，优势是不用写很多"),a("code",[t._v("then")]),t._v(",优雅解决回调地狱问题。")])]),t._v(" "),a("li",[a("p",[t._v("如果多个异步代码没有依赖性缺使用了"),a("code",[t._v("await")]),t._v("会导致性能上的降低。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//完全可以使用promise.all")]),t._v("\nPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("all"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("await")]),t._v("其实就是"),a("code",[t._v("Generator")]),t._v(" 加上"),a("code",[t._v("Promise")]),t._v("的语法糖")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);